name: PyPI

on:
  workflow_dispatch:
  push:
    branches:
      - master
    paths:
      - "python/**"
      - "src/**"
      - ".github/workflows/pypi.yml"
      - "!python/.gitignore"
  release:
    types:
      - published

jobs:
  build_sdist:
    name: Build SDist
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: python
    steps:
      - uses: actions/checkout@v3

      - name: Build SDist
        run: |
          pipx run build --sdist

      - name: Check metadata
        run: |
          pipx run twine check dist/*
          realpath dist/*

      - uses: actions/upload-artifact@v3
        with:
          path: python/dist/*

  build_wheels:
    name: Wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - uses: actions/checkout@v3

      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all

      - name: Build wheels for musllinux
        if: runner.os == 'Linux'
        uses: pypa/cibuildwheel@v2.11.3
        with:
          package-dir: ./python # trigger cibuildwheel in sub-directory
        env:
          CIBW_BUILD: "cp*-musllinux_i686 cp*-musllinux_x86_64"
          # CIBW_BEFORE_ALL: "apk add openblas-dev lapack-dev jpeg-dev"
          CIBW_TEST_SKIP: "*" # some dependencies not provide wheel

      - name: Build wheels for manylinux
        if: runner.os == 'Linux'
        uses: pypa/cibuildwheel@v2.11.3
        with:
          package-dir: ./python # trigger cibuildwheel in sub-directory
        env:
          CIBW_BUILD: "cp*-manylinux_i686 cp*-manylinux_x86_64"
          CIBW_TEST_SKIP: "cp*-manylinux_i686" # test fail but no informative message return 

      - name: Build wheels for Windows
        if: runner.os == 'Windows'
        uses: pypa/cibuildwheel@v2.11.3
        with:
          package-dir: ./python # trigger cibuildwheel in sub-directory
        env:
          CIBW_BUILD: "cp*"
          CIBW_TEST_SKIP: "cp310-win32 cp311-win32" # some dependencies not provide wheel

      - name: Build wheels for MacOS
        if: runner.os == 'macos'
        uses: pypa/cibuildwheel@v2.11.3
        with:
          package-dir: ./python # trigger cibuildwheel in sub-directory
        env:
          CIBW_BUILD: "cp*"
          CIBW_ARCHS: "x86_64 arm64 universal2" # the latest MacOS support the Rosetta
          CIBW_BEFORE_ALL: "brew install libomp" # install openmp library
          CIBW_TEST_SKIP: "*-macosx_arm64 *-macosx_universal2:arm64"

      - name: Verify clean directory
        run: git diff --exit-code
        shell: bash

      - name: Upload wheels to the project's github page
        uses: actions/upload-artifact@v3
        with:
          path: wheelhouse/*.whl

  #   upload_TestPyPI:
  #     name: Upload alpha version to TestPyPI
  #     needs: [build_wheels, build_sdist]
  #     runs-on: ubuntu-latest

  #     steps:
  #       - uses: actions/download-artifact@v3
  #         with:
  #           name: artifact
  #           path: dist

  #       - uses: pypa/gh-action-pypi-publish@release/v1
  #         with:
  #           user: __token__
  #           password: ${{ secrets.TEST_PYPI_API_TOKEN }}
  #           repository_url: https://test.pypi.org/legacy/
  #           verbose: true

  upload_PyPI:
    name: Upload to PyPI if release
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'

    steps:
      # - uses: actions/setup-python@v2

      - uses: actions/download-artifact@v3
        with:
          name: artifact
          path: dist

      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
